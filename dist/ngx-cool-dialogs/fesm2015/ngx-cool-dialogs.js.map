{"version":3,"file":"ngx-cool-dialogs.js","sources":["ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.config.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.animation.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs-types.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.service.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.module.ts","ng://ngx-cool-dialogs/ngx-cool-dialogs.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { NgxCoolDialogTheme } from './ngx-cool-dialogs-theme';\n\n/**\n * Base configuration object. It applies to both local and global\n * settings. Local refers to config passed through the service's\n * methods; Global referes to config passed through the module's\n * .forRoot()\n */\nexport class NgxCoolDialogsBaseConfig {\n  /**\n   * Popup theme\n   */\n  theme?: NgxCoolDialogTheme;\n\n  /**\n   * Text of the 'OK' button\n   */\n  okButtonText?: string;\n\n  /**\n   * Text of the 'Cancel' button\n   */\n  cancelButtonText?: string;\n\n  /**\n   * Color for buttons (fill, labels and borders)\n   */\n  color?: string;\n\n  constructor() {\n    this.theme = 'default';\n    this.color = '#3F51B5';\n  }\n}\n\n/**\n * Object used to set the titles of all popups upfront\n */\nexport interface NgxCoolDialogsGlobalTitles {\n  titles?: {\n    alert?: string;\n    confirm?: string;\n    prompt?: string;\n  };\n}\n\n/**\n * Models the props you can change only via service's methods\n */\nexport interface NgxCoolDialogsLocalConfigComplement {\n  title?: string;\n  defaultText?: string;\n}\n\n/**\n * Represents the allowable interface for global config only\n */\nexport type NgxCoolDialogsGlobalConfig = NgxCoolDialogsBaseConfig & NgxCoolDialogsGlobalTitles;\n\n/**\n * Represents the allowable interface for local config only\n */\nexport type NgxCoolDialogsLocalConfig = NgxCoolDialogsBaseConfig &\n  NgxCoolDialogsLocalConfigComplement;\n\n/**\n * Represents a union between global and local configs\n */\nexport type NgxCoolDialogsCompleteConfig = NgxCoolDialogsBaseConfig &\n  NgxCoolDialogsGlobalTitles &\n  NgxCoolDialogsLocalConfigComplement;\n\n/**\n * Configuration injection token\n */\nexport let NGX_COOL_DIALOGS_CONFIG = new InjectionToken<NgxCoolDialogsGlobalConfig>(\n  'ngx-cool-dialogs.config'\n);\n","import {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationTriggerMetadata\n} from '@angular/animations';\n\nexport const fadeInOut: AnimationTriggerMetadata = trigger('fadeInOut', [\n  state('in', style({ opacity: '1' })),\n  transition('void => *', [\n    style({ opacity: 0 }),\n    animate('.3s ease')\n  ]),\n  transition('* => void', [\n    animate('0.3s 150ms ease',\n      style({ opacity: 0 }))\n  ])\n]);\n","import { Observable } from 'rxjs';\n\n/**\n * Available popup types\n */\nexport enum NgxCoolDialogType {\n  Alert,\n  Confirm,\n  Prompt,\n}\n\n/**\n * Payload return by the result callback of the prompt popup\n */\nexport interface NgxCoolDialogPromptResult {\n  result: boolean;\n  value: string;\n}\n\n/**\n * Generic popup result type\n */\nexport type NgxCoolDialogResult = Observable<boolean | NgxCoolDialogPromptResult>;\n","import {\n  NgxCoolDialogsLocalConfig,\n  NgxCoolDialogsCompleteConfig,\n  NgxCoolDialogsGlobalConfig,\n  NgxCoolDialogsBaseConfig,\n} from './ngx-cool-dialogs.config';\nimport { NgxCoolDialogTheme } from './ngx-cool-dialogs-theme';\nimport { fadeInOut } from './ngx-cool-dialogs.animation';\nimport { NgxCoolDialogType, NgxCoolDialogPromptResult } from './ngx-cool-dialogs-types';\nimport {\n  Component,\n  HostBinding,\n  ViewEncapsulation,\n  OnInit,\n  Optional,\n  Inject,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { NGX_COOL_DIALOGS_CONFIG } from './ngx-cool-dialogs.config';\n\n@Component({\n  selector: 'ngx-cool-dialog',\n  templateUrl: './ngx-cool-dialog.html',\n  styleUrls: ['./ngx-cool-dialog.scss'],\n  animations: [fadeInOut],\n  host: {\n    '(@fadeInOut.done)': 'animationDone()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxCoolDialog implements OnInit, AfterViewInit, OnDestroy {\n  /**\n   * Subject used to stream close events\n   */\n  private closeSubject: Subject<boolean | NgxCoolDialogPromptResult> = new Subject();\n\n  /**\n   * Observable that emits on every close action\n   */\n  $close: Observable<\n    boolean | NgxCoolDialogPromptResult\n  > = this.closeSubject.asObservable();\n\n  /**\n   * The type of the popup\n   */\n  type: NgxCoolDialogType;\n\n  /**\n   * List of all the available dialg types\n   */\n  types = NgxCoolDialogType;\n\n  /**\n   * Main text to render inside the popup\n   */\n  message: string;\n\n  /**\n   * Whether or not the popup is closing\n   */\n  closing = false;\n\n  /**\n   * Whether or not to listen to 'enter' key\n   */\n  canListenToEnter = false;\n\n  /**\n   * Element that is focused prior to modal opening\n   */\n  private elWithFocus: HTMLElement;\n\n  /**\n   * Whether or not to enable host animation\n   */\n  @HostBinding('@fadeInOut')\n  animation = true;\n\n  /**\n   * Class to be applied according to the desired theme\n   */\n  @HostBinding('class')\n  themeClass: string;\n\n  /**\n   * Reference to the prompt text input\n   */\n  @ViewChild('promptInput', { static: false })\n  promptInput: ElementRef;\n\n  /**\n   * Reference to the popup content\n   */\n  @ViewChild('popupContent', { static: false })\n  popupContent: ElementRef;\n\n  /**\n   * Whether or not to set the host class\n   */\n  @HostBinding('class.ngx-cool-dialog')\n  setHostClass = true;\n\n  /**\n   * The config passed by the user via service methods\n   */\n  localConfig: NgxCoolDialogsLocalConfig;\n\n  /**\n   * Mapped config that blends both local and global configs\n   */\n  private _config: NgxCoolDialogsCompleteConfig;\n\n  /**\n   * The current mapped config\n   */\n  get config(): NgxCoolDialogsCompleteConfig {\n    return this._config;\n  }\n\n  /**\n   * The current theme\n   */\n  get theme(): NgxCoolDialogTheme {\n    return this.config.theme;\n  }\n\n  /**\n   * Initializes the component\n   * @param globalConfig - the configuration passed via .forRoot()\n   */\n  constructor(\n    @Optional()\n    @Inject(NGX_COOL_DIALOGS_CONFIG)\n    private globalConfig: NgxCoolDialogsGlobalConfig\n  ) {}\n\n  /**\n   * Initializes the component with the theme and mapped configs\n   */\n  ngOnInit() {\n    this.elWithFocus = document.activeElement as HTMLElement;\n    const defaultConfig = new NgxCoolDialogsBaseConfig();\n    this._config = Object.assign(\n      {},\n      defaultConfig,\n      this.globalConfig,\n      this.localConfig\n    );\n    this.themeClass = `ngx-cool-dialog--${this.theme}-theme`;\n  }\n\n  /**\n   * Called after Angular initializes the component's views\n   */\n  ngAfterViewInit() {\n    // set the focus to 'content' so that ESC can be listened right away\n    this.popupContent.nativeElement.focus();\n\n    // if the type is Prompt, then set the focus to the input and select\n    // the text, just as window.prompt does\n    if (this.type === NgxCoolDialogType.Prompt) {\n      const input = this.promptInput.nativeElement as HTMLInputElement;\n      input.focus();\n      const defaultText = this.config.defaultText;\n      if (defaultText) {\n        input.value = defaultText;\n        input.setSelectionRange(0, defaultText.length);\n      }\n    }\n  }\n\n  /**\n   * Listener for the 'esc' key\n   */\n  escKey() {\n    this.close();\n  }\n\n  /**\n   * Listener for the 'enter' key. It needs a fake 'debounce' otherwise\n   * the popup would close immediately after it's opened, if it\n   * was trigger via an 'enter' key prior to popup opening.\n   */\n  enterKey() {\n    if (this.canListenToEnter) {\n      this.close(true);\n    }\n  }\n\n  /**\n   * Closes the current popup. Emits an event with the payload.\n   * The payload can either be a boolean, or an object if the type\n   * is Prompt.\n   * @param result - whether it was 'Cancel': false, or 'OK': true\n   */\n  close(result = false) {\n    this.closing = true;\n    requestAnimationFrame(() => {\n      let payload;\n      if (this.type === NgxCoolDialogType.Prompt) {\n        payload = {\n          result,\n          value: this.promptInput.nativeElement.value || '',\n        };\n      } else {\n        payload = result;\n      }\n      this.closeSubject.next(payload);\n    });\n  }\n\n  /**\n   * Listener for click events on the 'x' button\n   */\n  onCloseBtnClick() {\n    this.close();\n  }\n\n  /**\n   * Function called when the main host animation finishes\n   */\n  animationDone() {\n    this.canListenToEnter = true;\n  }\n\n  /**\n   * Listener for click events on the 'OK' button\n   */\n  onOkBtnClick() {\n    this.close(true);\n  }\n\n  /**\n   * Listener for click events on the 'Cancel' button\n   */\n  onCancelBtnClick() {\n    this.close();\n  }\n\n  /**\n   * Listener for click events on the backdrop shadow\n   */\n  onBackdropClick() {\n    this.close();\n  }\n\n  /**\n   * The popup's title\n   */\n  getTitle() {\n    // if a generic title exists, then use that\n    let title = this.config.title;\n    if (title) {\n      return title;\n    }\n\n    // if no title was passed on `open()`, then search\n    // through the titles set via global configs\n    const titles = this.config.titles || {};\n    if (this.type === NgxCoolDialogType.Alert) {\n      title = titles.alert;\n    } else if (this.type === NgxCoolDialogType.Confirm) {\n      title = titles.confirm;\n    } else {\n      title = titles.prompt;\n    }\n    return title;\n  }\n\n  /**\n   * Component cleanup. return the focus to the element that was active\n   * prior to the popup opening\n   */\n  ngOnDestroy() {\n    const body = document.body;\n    const elWithFocus = this.elWithFocus;\n\n    let elementToFocus;\n    if (elWithFocus && elWithFocus.focus && body.contains(elWithFocus)) {\n      elementToFocus = elWithFocus;\n    } else {\n      elementToFocus = body;\n    }\n    elementToFocus.focus();\n    this.elWithFocus = null;\n  }\n\n  /**\n   * Returns the fill color of the 'OK' button\n   */\n  getOkButtonTextColor(): string {\n    // only for material theme the 'OK' has a color different than white\n    if (this.theme === 'material') {\n      return this.config.color;\n    }\n  }\n\n  /**\n   * Returns the fill color of the 'OK' button\n   */\n  getOkButtonFillColor(): string {\n    // material theme doesn't have filled buttons\n    if (this.theme !== 'material') {\n      return this.config.color;\n    }\n  }\n\n  /**\n   * Returns the border color of the 'Cancel' button\n   */\n  getCancelButtonBorderColor(): string {\n    // material theme doesn't have border\n    if (this.theme !== 'material') {\n      return this.config.color;\n    }\n  }\n\n  /**\n   * Returns the text color of the 'Cancel' button\n   */\n  getCancelButtonTextColor(): string {\n    // for dark theme the text should always be white\n    if (this.theme !== 'dark') {\n      return this.config.color;\n    }\n  }\n}\n","import {\n  NgxCoolDialogType,\n  NgxCoolDialogResult,\n  NgxCoolDialogPromptResult,\n} from './ngx-cool-dialogs-types';\nimport { NgxCoolDialog } from './ngx-cool-dialogs';\nimport {\n  Injectable,\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Injector,\n} from '@angular/core';\nimport { ComponentPortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { NgxCoolDialogsLocalConfig } from './ngx-cool-dialogs.config';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class NgxCoolDialogsService {\n  /**\n   * Reference to the main Portal.\n   */\n  private coolDialogPortal: ComponentPortal<NgxCoolDialog>;\n\n  /**\n   * Reference to the main Portal Host.\n   */\n  private bodyPortalHost: DomPortalOutlet;\n\n  constructor(\n    private appRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {\n    // Create a Portal based on the NgxCoolDialog component\n    this.coolDialogPortal = new ComponentPortal(NgxCoolDialog);\n\n    // Create a PortalHost anchored in document.body\n    this.bodyPortalHost = new DomPortalOutlet(\n      document.body,\n      this.componentFactoryResolver,\n      this.appRef,\n      this.injector\n    );\n  }\n\n  /**\n   * Creates an alert popup\n   * @param message - text to render inside the popup\n   * @param config - optional configuration object\n   */\n  alert(message: string, config?: NgxCoolDialogsLocalConfig): NgxCoolDialogResult {\n    return this.createCoolDialogComponent(NgxCoolDialogType.Alert, message, config);\n  }\n\n  /**\n   * Creates a confirm popup\n   * @param message - text to render inside the popup\n   * @param config - optional configuration object\n   */\n  confirm(message: string, config?: NgxCoolDialogsLocalConfig): NgxCoolDialogResult {\n    return this.createCoolDialogComponent(NgxCoolDialogType.Confirm, message, config);\n  }\n\n  /**\n   * Creates a prompt popup\n   * @param message - text to render inside the popup\n   * @param config - optional configuration object\n   */\n  prompt(prompt: string, config?: NgxCoolDialogsLocalConfig): NgxCoolDialogResult {\n    return this.createCoolDialogComponent(NgxCoolDialogType.Prompt, prompt, config);\n  }\n\n  /**\n   * Creates a popup\n   * @param type - type of the popup: alert, confirm or prompt\n   * @param message - main text to render inside the popup\n   * @param config - optional configuration object\n   */\n  private createCoolDialogComponent(\n    type: NgxCoolDialogType,\n    message: string,\n    config?: NgxCoolDialogsLocalConfig\n  ): NgxCoolDialogResult {\n    const componentRef = this.bodyPortalHost.attachComponentPortal(\n      this.coolDialogPortal\n    );\n    const coolDialog = componentRef.instance as NgxCoolDialog;\n    coolDialog.message = message;\n    coolDialog.localConfig = config;\n    coolDialog.type = type;\n    // subscribe to the popup closing event so that the portal can actually be detached\n    const subscription = coolDialog.$close.subscribe(\n      (res: boolean | NgxCoolDialogPromptResult) => {\n        this.bodyPortalHost.detach();\n        subscription.unsubscribe();\n      }\n    );\n    return new Observable((observer) => {\n      // subscribe to the popup closing event to forward the event to the caller\n      const _subscription = coolDialog.$close.subscribe(\n        (res: boolean | NgxCoolDialogPromptResult) => {\n          _subscription.unsubscribe();\n          observer.next(res);\n        }\n      );\n    });\n  }\n}\n","import { NGX_COOL_DIALOGS_CONFIG } from './ngx-cool-dialogs.config';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxCoolDialog } from './ngx-cool-dialogs';\nimport { NgxCoolDialogsService } from './ngx-cool-dialogs.service';\nimport { NgxCoolDialogsGlobalConfig } from './ngx-cool-dialogs.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxCoolDialog],\n  exports: [NgxCoolDialog],\n  entryComponents: [NgxCoolDialog],\n})\nexport class NgxCoolDialogsModule {\n  static forRoot(globalConfig?: NgxCoolDialogsGlobalConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxCoolDialogsModule,\n      providers: [\n        NgxCoolDialogsService,\n        {\n          provide: NGX_COOL_DIALOGS_CONFIG,\n          useValue: globalConfig,\n        },\n      ],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {fadeInOut as ɵa} from './lib/ngx-cool-dialogs.animation';"],"names":[],"mappings":"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"}