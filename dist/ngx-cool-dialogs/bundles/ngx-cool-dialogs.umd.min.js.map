{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs-types.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.config.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.animation.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.service.ts","ng://ngx-cool-dialogs/lib/ngx-cool-dialogs.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","NgxCoolDialogType","this","theme","color","NGX_COOL_DIALOGS_CONFIG","InjectionToken","fadeInOut","trigger","state","style","opacity","transition","animate","NgxCoolDialog","globalConfig","closeSubject","Subject","$close","asObservable","types","closing","canListenToEnter","animation","setHostClass","prototype","_config","config","ngOnInit","elWithFocus","document","activeElement","defaultConfig","NgxCoolDialogsBaseConfig","assign","localConfig","themeClass","ngAfterViewInit","popupContent","nativeElement","focus","type","Prompt","input","promptInput","defaultText","value","setSelectionRange","escKey","close","enterKey","result","_this","requestAnimationFrame","payload","next","onCloseBtnClick","animationDone","onOkBtnClick","onCancelBtnClick","onBackdropClick","getTitle","title","titles","Alert","alert","Confirm","confirm","prompt","ngOnDestroy","body","contains","getOkButtonTextColor","getOkButtonFillColor","getCancelButtonBorderColor","getCancelButtonTextColor","Optional","Inject","args","HostBinding","ViewChild","static","Component","selector","template","animations","host","(@fadeInOut.done)","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgxCoolDialogsService","appRef","componentFactoryResolver","injector","coolDialogPortal","ComponentPortal","bodyPortalHost","DomPortalOutlet","message","createCoolDialogComponent","coolDialog","attachComponentPortal","instance","subscription","subscribe","res","detach","unsubscribe","Observable","observer","_subscription","ApplicationRef","ComponentFactoryResolver","Injector","Injectable","NgxCoolDialogsModule","forRoot","ngModule","NgxCoolDialogsModule_1","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Observable } from 'rxjs';\n\n/**\n * Available popup types\n */\nexport enum NgxCoolDialogType {\n  Alert,\n  Confirm,\n  Prompt,\n}\n\n/**\n * Payload return by the result callback of the prompt popup\n */\nexport interface NgxCoolDialogPromptResult {\n  result: boolean;\n  value: string;\n}\n\n/**\n * Generic popup result type\n */\nexport type NgxCoolDialogResult = Observable<boolean | NgxCoolDialogPromptResult>;\n","import { InjectionToken } from '@angular/core';\nimport { NgxCoolDialogTheme } from './ngx-cool-dialogs-theme';\n\n/**\n * Base configuration object. It applies to both local and global\n * settings. Local refers to config passed through the service's\n * methods; Global referes to config passed through the module's\n * .forRoot()\n */\nexport class NgxCoolDialogsBaseConfig {\n  /**\n   * Popup theme\n   */\n  theme?: NgxCoolDialogTheme;\n\n  /**\n   * Text of the 'OK' button\n   */\n  okButtonText?: string;\n\n  /**\n   * Text of the 'Cancel' button\n   */\n  cancelButtonText?: string;\n\n  /**\n   * Color for buttons (fill, labels and borders)\n   */\n  color?: string;\n\n  constructor() {\n    this.theme = 'default';\n    this.color = '#3F51B5';\n  }\n}\n\n/**\n * Object used to set the titles of all popups upfront\n */\nexport interface NgxCoolDialogsGlobalTitles {\n  titles?: {\n    alert?: string;\n    confirm?: string;\n    prompt?: string;\n  };\n}\n\n/**\n * Models the props you can change only via service's methods\n */\nexport interface NgxCoolDialogsLocalConfigComplement {\n  title?: string;\n  defaultText?: string;\n}\n\n/**\n * Represents the allowable interface for global config only\n */\nexport type NgxCoolDialogsGlobalConfig = NgxCoolDialogsBaseConfig & NgxCoolDialogsGlobalTitles;\n\n/**\n * Represents the allowable interface for local config only\n */\nexport type NgxCoolDialogsLocalConfig = NgxCoolDialogsBaseConfig &\n  NgxCoolDialogsLocalConfigComplement;\n\n/**\n * Represents a union between global and local configs\n */\nexport type NgxCoolDialogsCompleteConfig = NgxCoolDialogsBaseConfig &\n  NgxCoolDialogsGlobalTitles &\n  NgxCoolDialogsLocalConfigComplement;\n\n/**\n * Configuration injection token\n */\nexport let NGX_COOL_DIALOGS_CONFIG = new InjectionToken<NgxCoolDialogsGlobalConfig>(\n  'ngx-cool-dialogs.config'\n);\n","import {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationTriggerMetadata\n} from '@angular/animations';\n\nexport const fadeInOut: AnimationTriggerMetadata = trigger('fadeInOut', [\n  state('in', style({ opacity: '1' })),\n  transition('void => *', [\n    style({ opacity: 0 }),\n    animate('.3s ease')\n  ]),\n  transition('* => void', [\n    animate('0.3s 150ms ease',\n      style({ opacity: 0 }))\n  ])\n]);\n","import {\n  NgxCoolDialogsLocalConfig,\n  NgxCoolDialogsCompleteConfig,\n  NgxCoolDialogsGlobalConfig,\n  NgxCoolDialogsBaseConfig,\n} from './ngx-cool-dialogs.config';\nimport { NgxCoolDialogTheme } from './ngx-cool-dialogs-theme';\nimport { fadeInOut } from './ngx-cool-dialogs.animation';\nimport { NgxCoolDialogType, NgxCoolDialogPromptResult } from './ngx-cool-dialogs-types';\nimport {\n  Component,\n  HostBinding,\n  ViewEncapsulation,\n  OnInit,\n  Optional,\n  Inject,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  OnDestroy,\n} from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { NGX_COOL_DIALOGS_CONFIG } from './ngx-cool-dialogs.config';\n\n@Component({\n  selector: 'ngx-cool-dialog',\n  templateUrl: './ngx-cool-dialog.html',\n  styleUrls: ['./ngx-cool-dialog.scss'],\n  animations: [fadeInOut],\n  host: {\n    '(@fadeInOut.done)': 'animationDone()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgxCoolDialog implements OnInit, AfterViewInit, OnDestroy {\n  /**\n   * Subject used to stream close events\n   */\n  private closeSubject: Subject<boolean | NgxCoolDialogPromptResult> = new Subject();\n\n  /**\n   * Observable that emits on every close action\n   */\n  $close: Observable<\n    boolean | NgxCoolDialogPromptResult\n  > = this.closeSubject.asObservable();\n\n  /**\n   * The type of the popup\n   */\n  type: NgxCoolDialogType;\n\n  /**\n   * List of all the available dialg types\n   */\n  types = NgxCoolDialogType;\n\n  /**\n   * Main text to render inside the popup\n   */\n  message: string;\n\n  /**\n   * Whether or not the popup is closing\n   */\n  closing = false;\n\n  /**\n   * Whether or not to listen to 'enter' key\n   */\n  canListenToEnter = false;\n\n  /**\n   * Element that is focused prior to modal opening\n   */\n  private elWithFocus: HTMLElement;\n\n  /**\n   * Whether or not to enable host animation\n   */\n  @HostBinding('@fadeInOut')\n  animation = true;\n\n  /**\n   * Class to be applied according to the desired theme\n   */\n  @HostBinding('class')\n  themeClass: string;\n\n  /**\n   * Reference to the prompt text input\n   */\n  @ViewChild('promptInput', { static: false })\n  promptInput: ElementRef;\n\n  /**\n   * Reference to the popup content\n   */\n  @ViewChild('popupContent', { static: false })\n  popupContent: ElementRef;\n\n  /**\n   * Whether or not to set the host class\n   */\n  @HostBinding('class.ngx-cool-dialog')\n  setHostClass = true;\n\n  /**\n   * The config passed by the user via service methods\n   */\n  localConfig: NgxCoolDialogsLocalConfig;\n\n  /**\n   * Mapped config that blends both local and global configs\n   */\n  private _config: NgxCoolDialogsCompleteConfig;\n\n  /**\n   * The current mapped config\n   */\n  get config(): NgxCoolDialogsCompleteConfig {\n    return this._config;\n  }\n\n  /**\n   * The current theme\n   */\n  get theme(): NgxCoolDialogTheme {\n    return this.config.theme;\n  }\n\n  /**\n   * Initializes the component\n   * @param globalConfig - the configuration passed via .forRoot()\n   */\n  constructor(\n    @Optional()\n    @Inject(NGX_COOL_DIALOGS_CONFIG)\n    private globalConfig: NgxCoolDialogsGlobalConfig\n  ) {}\n\n  /**\n   * Initializes the component with the theme and mapped configs\n   */\n  ngOnInit() {\n    this.elWithFocus = document.activeElement as HTMLElement;\n    const defaultConfig = new NgxCoolDialogsBaseConfig();\n    this._config = Object.assign(\n      {},\n      defaultConfig,\n      this.globalConfig,\n      this.localConfig\n    );\n    this.themeClass = `ngx-cool-dialog--${this.theme}-theme`;\n  }\n\n  /**\n   * Called after Angular initializes the component's views\n   */\n  ngAfterViewInit() {\n    // set the focus to 'content' so that ESC can be listened right away\n    this.popupContent.nativeElement.focus();\n\n    // if the type is Prompt, then set the focus to the input and select\n    // the text, just as window.prompt does\n    if (this.type === NgxCoolDialogType.Prompt) {\n      const input = this.promptInput.nativeElement as HTMLInputElement;\n      input.focus();\n      const defaultText = this.config.defaultText;\n      if (defaultText) {\n        input.value = defaultText;\n        input.setSelectionRange(0, defaultText.length);\n      }\n    }\n  }\n\n  /**\n   * Listener for the 'esc' key\n   */\n  escKey() {\n    this.close();\n  }\n\n  /**\n   * Listener for the 'enter' key. It needs a fake 'debounce' otherwise\n   * the popup would close immediately after it's opened, if it\n   * was trigger via an 'enter' key prior to popup opening.\n   */\n  enterKey() {\n    if (this.canListenToEnter) {\n      this.close(true);\n    }\n  }\n\n  /**\n   * Closes the current popup. Emits an event with the payload.\n   * The payload can either be a boolean, or an object if the type\n   * is Prompt.\n   * @param result - whether it was 'Cancel': false, or 'OK': true\n   */\n  close(result = false) {\n    this.closing = true;\n    requestAnimationFrame(() => {\n      let payload;\n      if (this.type === NgxCoolDialogType.Prompt) {\n        payload = {\n          result,\n          value: this.promptInput.nativeElement.value || '',\n        };\n      } else {\n        payload = result;\n      }\n      this.closeSubject.next(payload);\n    });\n  }\n\n  /**\n   * Listener for click events on the 'x' button\n   */\n  onCloseBtnClick() {\n    this.close();\n  }\n\n  /**\n   * Function called when the main host animation finishes\n   */\n  animationDone() {\n    this.canListenToEnter = true;\n  }\n\n  /**\n   * Listener for click events on the 'OK' button\n   */\n  onOkBtnClick() {\n    this.close(true);\n  }\n\n  /**\n   * Listener for click events on the 'Cancel' button\n   */\n  onCancelBtnClick() {\n    this.close();\n  }\n\n  /**\n   * Listener for click events on the backdrop shadow\n   */\n  onBackdropClick() {\n    this.close();\n  }\n\n  /**\n   * The popup's title\n   */\n  getTitle() {\n    // if a generic title exists, then use that\n    let title = this.config.title;\n    if (title) {\n      return title;\n    }\n\n    // if no title was passed on `open()`, then search\n    // through the titles set via global configs\n    const titles = this.config.titles || {};\n    if (this.type === NgxCoolDialogType.Alert) {\n      title = titles.alert;\n    } else if (this.type === NgxCoolDialogType.Confirm) {\n      title = titles.confirm;\n    } else {\n      title = titles.prompt;\n    }\n    return title;\n  }\n\n  /**\n   * Component cleanup. return the focus to the element that was active\n   * prior to the popup opening\n   */\n  ngOnDestroy() {\n    const body = document.body;\n    const elWithFocus = this.elWithFocus;\n\n    let elementToFocus;\n    if (elWithFocus && elWithFocus.focus && body.contains(elWithFocus)) {\n      elementToFocus = elWithFocus;\n    } else {\n      elementToFocus = body;\n    }\n    elementToFocus.focus();\n    this.elWithFocus = null;\n  }\n\n  /**\n   * Returns the fill color of the 'OK' button\n   */\n  getOkButtonTextColor(): string {\n    // only for material theme the 'OK' has a color different than white\n    if (this.theme === 'material') {\n      return this.config.color;\n    }\n  }\n\n  /**\n   * Returns the fill color of the 'OK' button\n   */\n  getOkButtonFillColor(): string {\n    // material theme doesn't have filled buttons\n    if (this.theme !== 'material') {\n      return this.config.color;\n    }\n  }\n\n  /**\n   * Returns the border color of the 'Cancel' button\n   */\n  getCancelButtonBorderColor(): string {\n    // material theme doesn't have border\n    if (this.theme !== 'material') {\n      return this.config.color;\n    }\n  }\n\n  /**\n   * Returns the text color of the 'Cancel' button\n   */\n  getCancelButtonTextColor(): string {\n    // for dark theme the text should always be white\n    if (this.theme !== 'dark') {\n      return this.config.color;\n    }\n  }\n}\n","import {\n  NgxCoolDialogType,\n  NgxCoolDialogResult,\n  NgxCoolDialogPromptResult,\n} from './ngx-cool-dialogs-types';\nimport { NgxCoolDialog } from './ngx-cool-dialogs';\nimport {\n  Injectable,\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Injector,\n} from '@angular/core';\nimport { ComponentPortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { NgxCoolDialogsLocalConfig } from './ngx-cool-dialogs.config';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class NgxCoolDialogsService {\n  /**\n   * Reference to the main Portal.\n   */\n  private coolDialogPortal: ComponentPortal<NgxCoolDialog>;\n\n  /**\n   * Reference to the main Portal Host.\n   */\n  private bodyPortalHost: DomPortalOutlet;\n\n  constructor(\n    private appRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {\n    // Create a Portal based on the NgxCoolDialog component\n    this.coolDialogPortal = new ComponentPortal(NgxCoolDialog);\n\n    // Create a PortalHost anchored in document.body\n    this.bodyPortalHost = new DomPortalOutlet(\n      document.body,\n      this.componentFactoryResolver,\n      this.appRef,\n      this.injector\n    );\n  }\n\n  /**\n   * Creates an alert popup\n   * @param message - text to render inside the popup\n   * @param config - optional configuration object\n   */\n  alert(message: string, config?: NgxCoolDialogsLocalConfig): NgxCoolDialogResult {\n    return this.createCoolDialogComponent(NgxCoolDialogType.Alert, message, config);\n  }\n\n  /**\n   * Creates a confirm popup\n   * @param message - text to render inside the popup\n   * @param config - optional configuration object\n   */\n  confirm(message: string, config?: NgxCoolDialogsLocalConfig): NgxCoolDialogResult {\n    return this.createCoolDialogComponent(NgxCoolDialogType.Confirm, message, config);\n  }\n\n  /**\n   * Creates a prompt popup\n   * @param message - text to render inside the popup\n   * @param config - optional configuration object\n   */\n  prompt(prompt: string, config?: NgxCoolDialogsLocalConfig): NgxCoolDialogResult {\n    return this.createCoolDialogComponent(NgxCoolDialogType.Prompt, prompt, config);\n  }\n\n  /**\n   * Creates a popup\n   * @param type - type of the popup: alert, confirm or prompt\n   * @param message - main text to render inside the popup\n   * @param config - optional configuration object\n   */\n  private createCoolDialogComponent(\n    type: NgxCoolDialogType,\n    message: string,\n    config?: NgxCoolDialogsLocalConfig\n  ): NgxCoolDialogResult {\n    const componentRef = this.bodyPortalHost.attachComponentPortal(\n      this.coolDialogPortal\n    );\n    const coolDialog = componentRef.instance as NgxCoolDialog;\n    coolDialog.message = message;\n    coolDialog.localConfig = config;\n    coolDialog.type = type;\n    // subscribe to the popup closing event so that the portal can actually be detached\n    const subscription = coolDialog.$close.subscribe(\n      (res: boolean | NgxCoolDialogPromptResult) => {\n        this.bodyPortalHost.detach();\n        subscription.unsubscribe();\n      }\n    );\n    return new Observable((observer) => {\n      // subscribe to the popup closing event to forward the event to the caller\n      const _subscription = coolDialog.$close.subscribe(\n        (res: boolean | NgxCoolDialogPromptResult) => {\n          _subscription.unsubscribe();\n          observer.next(res);\n        }\n      );\n    });\n  }\n}\n","import { NGX_COOL_DIALOGS_CONFIG } from './ngx-cool-dialogs.config';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxCoolDialog } from './ngx-cool-dialogs';\nimport { NgxCoolDialogsService } from './ngx-cool-dialogs.service';\nimport { NgxCoolDialogsGlobalConfig } from './ngx-cool-dialogs.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [NgxCoolDialog],\n  exports: [NgxCoolDialog],\n  entryComponents: [NgxCoolDialog],\n})\nexport class NgxCoolDialogsModule {\n  static forRoot(globalConfig?: NgxCoolDialogsGlobalConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxCoolDialogsModule,\n      providers: [\n        NgxCoolDialogsService,\n        {\n          provide: NGX_COOL_DIALOGS_CONFIG,\n          useValue: globalConfig,\n        },\n      ],\n    };\n  }\n}\n"]}